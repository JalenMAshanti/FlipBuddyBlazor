@using FlipBuddyWebApplication.Client.ViewModels.Inventory.ItemDisplay
@using FlipBuddyWebApplication.Domain.Helpers

@inject Blazored.LocalStorage.ILocalStorageService localStorage
@inject ItemDisplayViewModel ViewModel
@inject ItemDisplayClient Client


<!-- Page Content -->
<div class="col d-flex flex-column full-height pt-3" style="width: 100%;">

    @if (ViewModel.isLoading)
    {
        <div class="p-4 mt-5" style="height:500px; width:100%; display:flex; justify-content:center; align-content:center;">
			<div class="loader mt-5" style="height:80px; width:80px;"></div>
        </div>
    }
    else
    {
        @if (ViewModel.CurrentDisplayMode == "ViewMode")
        {
 
            <div class="container">
			    <div class="row">
				    <h1 class="fw-bold fs-2">@CurrentProduct.Title</h1>
				    <div class="col-sm-12 col-md-6">
                        <div class="container mb-3"> 
						    <div class="row" style="height:40%;">

                                <div class="col">
								    <h4 class="text-secondary my-3">@Client._productRepository.GetCategory(CurrentProduct.CategoryId, CachedAppData.AllCategoies)</h4>
                                </div>
                                <div class="col">                              
                                    @if (CurrentProduct.DateSold == "")
                                    {
                                        <h4 class="text-secondary my-3 text-end">Not Sold</h4>
                                    }
                                    else
                                    {
                                        <h4 class="text-secondary my-3 text-end">Sold</h4>
                                    }
                                </div>
							
						    </div>
						    <div class="row">
							    <div class="container rounded-4 p-4" style="background-color:#F8F8F8; height:450px; overflow-y:scroll; scrollbar-width:none;">
								    <p class="text-secondary fs-6">
									    @CurrentProduct.Description
								    </p>
							    </div>
						    </div>
                        </div>
					
				    </div>
				    <div class="col-sm-12 col-md-6">
                        <div class="container">
						    <div class="row">
							    <div class="container-background p-4 mt-2 text-center rounded-4" style="background-color:#F8F8F8; min-height:260px;">
								    <h5 class="text-secondary">No thumbnails</h5>
							    </div>
						    </div>
                            <div class="row">
                                <h3 class="fw-bold fs-5 mt-2">Condition</h3>
                                <h5 class="mt-1 mb-2 fs-6">@Client._productRepository.GetCondition(CurrentProduct.ConditionId, CachedAppData.AllConditions)</h5>
                            </div>
						    <div class="row my-3">
							    <div class="col">
								    <h3 class="fw-bold fs-5">Quantity</h3>
								    <h5 class="text-secondary">@CurrentProduct.Quantity</h5>
							    </div>
							    <div class="col">
								    <h3 class="fw-bold fs-5">Purchased for</h3>
								    <h5 class="text-secondary">$@CurrentProduct.PurchasePrice</h5>
							    </div>
							    <div class="col">
								    <h3 class="fw-bold fs-5">Selling for</h3>
								    <h5 class="text-secondary">$@CurrentProduct.SellPrice</h5>
							    </div>
						    </div>
						    <div class="row">
							    <button class="btn rounded-3 shadow py-3 fw-bold text-white" style="width:100%; background-color:#3E7E55;">List on ebay</button>
						    </div>
                        </div>					
				    </div>
			    </div>
            </div>

        }



        else
        {
            <EditForm Model="UpdateProductRequest" FormName="UpdateProduct">

                <div class="container">
                    <div class="row">
                        <div class="col">
							<h1 class="text-secondary mb-3">Edit Mode</h1>
                        </div>
                        <div class="col" style="display:flex; justify-content:end;">
                            <button type="button" class="btn btn-outline-success px-4" style="height:40px;" @onclick="HandleSave">Save</button>
                        </div>
                    </div>
				
                    <div class="row">                  
                        <InputTextArea @bind-Value="UpdateProductRequest.Title" class="fw-bold fs-2" style="overflow-y:scroll; scrollbar-width:none; resize:none;"></InputTextArea>
                        <div class="col-sm-12 col-md-6">
                            <div class="container mb-3">
                                <div class="row" style="height:40%;">
                                    <div class="col">
                                        <InputSelect @bind-Value="UpdateProductRequest.CategoryId" class="form-select my-3" id="productcategoryt">
                                            <option selected disabled>Select a Category</option>
                                            @foreach (var category in ViewModel.Categories)
                                            {
                                                <option class="fw-bold" value="@category.CategoryId">@category.Name</option>
                                            }
                                        </InputSelect>
                                    </div>
                                    <div class="col">

                                        <InputDate class="form-control input-group date my-3" @bind-Value="UpdateProductRequest.DateSold"/>

                                    </div>

                                </div>
                                <div class="row">
                                    <div class="container rounded-4 p-2" style="background-color:#F8F8F8; height:450px;">
										<InputTextArea style="height:100%; width:100%; background-color:transparent; overflow-y:scroll; scrollbar-width:none; resize:none;" @bind-Value="UpdateProductRequest.Description" class="text-secondary fs-6 p-2">
                                            @CurrentProduct.Description
                                        </InputTextArea>
                                    </div>
                                </div>
                            </div>

                        </div>
                        <div class="col-sm-12 col-md-6">
                            <div class="container">
                                <div class="row">
                                    <div class="container-background p-4 mt-2 text-center rounded-4" style="background-color:#F8F8F8; min-height:260px;">
                                        <h5 class="text-secondary">No thumbnails</h5>
                                    </div>
                                </div>
                                <div class="row">
                                    <h3 class="fw-bold fs-5 mt-2">Condition</h3>
                                    <InputSelect @bind-Value="UpdateProductRequest.ConditionId" class="form-select" id="productconditiont">
                                        <option selected disabled>Select a Condition</option>
                                        @foreach (var condition in ViewModel.Conditions)
                                        {
                                            <option class="fw-bold" value="@condition.ConditionId">
                                                <h5>@condition.ConditionTitle</h5>
                                                <p>@condition.Description</p>
                                            </option>
                                        }
                                    </InputSelect>
                                </div>
                                <div class="row my-3">
                                    <div class="col-sm-12 col-lg-4 mb-2">
                                        <h3 class="fw-bold fs-5">Quantity</h3>
                                        <InputNumber style="width:100%" @bind-Value="UpdateProductRequest.Quantity" class="text-secondary form-control">@CurrentProduct.Quantity</InputNumber>
                                    </div>
                                    <div class="col-sm-12 col-lg-4 mb-2">
                                        <h3 class="fw-bold fs-5">Purchased for</h3>
                                        
                                        <div class="input-group" style="width:100%;">
                                            <span class="input-group-text">$</span>
											<InputNumber  @bind-Value="UpdateProductRequest.PurchasedPrice" class="text-secondary form-control" type="number" id="boughtprice"/>
                                        </div>
                                        
                                    </div>
                                    <div class="col-sm-12 col-lg-4 mb-2">
                                        <h3 class="fw-bold fs-5">Selling for</h3>
                                        <div class="input-group" style="width:100%;">
                                            <span class="input-group-text">$</span>
                                            <InputNumber @bind-Value="UpdateProductRequest.SellPrice" class="text-secondary form-control" type="number" id="boughtprice" />
                                        </div>
                                    </div>
                                </div>
                                <div class="row">
                                    <button class="btn rounded-3 shadow py-3 fw-bold text-white" style="width:100%; background-color:#3E7E55;" disabled>List on ebay</button>
                                </div>
                            </div>
                        </div>
                    </div>
                </div>
            </EditForm>          
        }

        <div class="container" style="display:flex; justify-content:center;">
			<button class="rounded-2 mt-4 py-1 px-3 fw-bold bg-secondary text-white" style="width:100px;" @onclick="HandleEditToggler">Edit</button>
        </div>
        

        <div class="container">
			<div class="row">
				<div class="container">
                    <h1 class="fw-bold fs-2">AI Insight</h1>
                    <div class="container p-3 rounded-4" style="background-color:#F8F8F8;">
						<h3 class="fs-5">Use a flip to let ai to tailor your listing</h3>
					</div>
				</div>
			</div>
		</div>
    }
</div>


<!-- Styles -->
<style>
	.rounded-pill {
		background-color: #EAEEE5;
		padding: 10px 25px;
		display: inline-block;
	}


	.text-white {
		color: white;
	}

	.upgrade-btn {
		background-color: #3E7E55;
		color: white;
		position: absolute;
		bottom: 20px;
		padding: 10px 20px;
	}

	.overview-row h1 {
		font-size: 25px;
	}

	/* Portfolio */
	.portfolio-container {
		font-size: clamp(1.5rem, 4vw, 3vw);
	}

	/* Recently Listed Items */
	.recent-items {
		padding-top: 10px;
	}

	/* Flex and alignment */
	.full-height {
		height: 100%;
	}

	.half-height {
		height: 40%;
        
	}

    .subimage{
        background-color:#CADEC8;
        background-size:contain;
        background-repeat: no-repeat;
        background-position:center;
    }

    .loader {
        width: 60px;
        aspect-ratio: 1;
        display: grid;
        grid: 50%/50%;
        color: #3E7E55;
        --_g: no-repeat linear-gradient(currentColor 0 0);
        background: var(--_g),var(--_g),var(--_g);
        background-size: 50.1% 50.1%;
        animation: l6-0 1.5s infinite steps(1) alternate, l6-0-0 3s infinite steps(1);
    }

        .loader::before {
            content: "";
            background: currentColor;
            transform: perspective(150px) rotateY(0deg) rotateX(0deg);
            transform-origin: bottom right;
            animation: l6-1 1.5s infinite linear alternate;
        }

    @@keyframes l6-0 {
        0% {
            background-position: 0 100%,100% 100%,100% 0
        }

        33% {
            background-position: 100% 100%,100% 100%,100% 0
        }

        66% {
            background-position: 100% 0,100% 0,100% 0
        }
    }

    @@keyframes l6-0-0 {
        0% {
            transform: scaleX(1) rotate(0deg)
        }

        50% {
            transform: scaleX(-1) rotate(-90deg)
        }
    }

    @@keyframes l6-1 {
        16.5% {
            transform: perspective(150px) rotateX(-90deg) rotateY(0deg) rotateX(0deg);
            filter: grayscale(0.8)
        }

        33% {
            transform: perspective(150px) rotateX(-180deg) rotateY(0deg) rotateX(0deg)
        }

        66% {
            transform: perspective(150px) rotateX(-180deg) rotateY(-180deg) rotateX(0deg)
        }

        100% {
            transform: perspective(150px) rotateX(-180deg) rotateY(-180deg) rotateX(-180deg);
            filter: grayscale(0.8)
        }
    }
</style>


@code
{
    [Parameter]
    public Product? CurrentProduct { get; set; }

    [SupplyParameterFromForm]
    public UpdateProductByGuidAndUserGuidRequest UpdateProductRequest { get; set; } = new UpdateProductByGuidAndUserGuidRequest();


    protected async override Task OnInitializedAsync()
    {
        ViewModel = new ItemDisplayViewModel();
        ViewModel.Conditions = CachedAppData.AllConditions;
        ViewModel.Categories = CachedAppData.AllCategoies;
        ViewModel.UserGuid = await localStorage.GetItemAsync<string>(LocalStorageTags.GetUserGuid);
        ViewModel.ProductGuid = await localStorage.GetItemAsync<string>(LocalStorageTags.GetSelectedItem);
        CurrentProduct = await Client._productRepository.GetProductByGuidAndUserGuid(ViewModel.UserGuid,ViewModel.ProductGuid);

        ViewModel.IsStillLoading(CurrentProduct);
    }

    public async Task HandleEditToggler()
    {
        if (ViewModel.CurrentDisplayMode == "ViewMode")
        {
            UpdateProductRequest.UserGuid = Guid.Parse(ViewModel.UserGuid);
            UpdateProductRequest.Guid = Guid.Parse(CurrentProduct.ProductGuid);
            UpdateProductRequest.Title = CurrentProduct.Title;
            UpdateProductRequest.Description = CurrentProduct.Description;
            UpdateProductRequest.PurchasedPrice = CurrentProduct.PurchasePrice;
            UpdateProductRequest.SellPrice = CurrentProduct.SellPrice;
            UpdateProductRequest.Quantity = CurrentProduct.Quantity;
            UpdateProductRequest.BarCode = CurrentProduct.Barcode;
            UpdateProductRequest.CategoryId = CurrentProduct.CategoryId;
            UpdateProductRequest.ConditionId = CurrentProduct.ConditionId;
            UpdateProductRequest.Currency = CurrentProduct.Currency;
            UpdateProductRequest.Guid = Guid.Parse(CurrentProduct.ProductGuid);

            try
            {
                UpdateProductRequest.DateSold = DateConverters.ConvertStringToDateOnly(CurrentProduct.DateSold);
            }
            catch
            {

            }


            ViewModel.CurrentDisplayMode = "EditMode";
        }
        else if (ViewModel.CurrentDisplayMode == "EditMode")
        {
            ViewModel.CurrentDisplayMode = "ViewMode";    
        }
        return;
    }

    public async Task HandleSave()
    {
        ViewModel.isLoading = true;

        var DateString = UpdateProductRequest.DateSold.ToString();
        if (DateString == "01/01/0001")
        {
            UpdateProductRequest.DateSold = null;
        }
        var result = await Client._productRepository.UpdateProductByGuidAndUserGuid(UpdateProductRequest);  

        CurrentProduct = await Client._productRepository.GetProductByGuidAndUserGuid(ViewModel.UserGuid, ViewModel.ProductGuid);

        ViewModel.isLoading = false;

        ViewModel.CurrentDisplayMode = "ViewMode";
    }   
}