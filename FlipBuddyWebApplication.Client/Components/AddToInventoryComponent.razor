@using FlipBuddyWebApplication.Client.ViewModels.AddToInventory
@using FlipBuddyWebApplication.Domain.Constants
@using FlipBuddyWebApplication.Domain.Models
@using FlipBuddyWebApplication.Persistence.Repositories

@inject AddToInventoryViewModel ViewModel
@inject AddToInventoryViewModelClient Client
@inject Blazored.LocalStorage.ILocalStorageService localStorage
@inject IJSRuntime JS

@rendermode InteractiveServer

<div>
	<div class="container">
	
		<!--control buttons-->
		<div class="container d-flex justify-content-between" style="position: fixed; bottom: 50px; left: 0; right: 0; text-align: center; z-index: 1000;">
			<a id="backButton" @onclick="ScrollToPreviousInput" class=" btn btn-primary rounded-circle border-none shadow-sm fs-3"><i class="bi bi-caret-left"></i></a>		
			<a id="nextButton" @onclick="ScrollToNextInput" class=" btn btn-primary rounded-circle border-none shadow-sm fs-3"><i class="bi bi-caret-right"></i></a>
		</div>


			<!--Title-->
		<div class="row my-3 sticky-top">
			<div class="col-10 col-sm-6 col-md-4 col-lg-8">
				<h1 class="fw-bold fs-3">Add Product to Inventory</h1>
			</div>
			<div class="col-2 col-sm-6 col-md-8 col-lg-4 d-flex align-items-center justify-content-center">
			</div>
		</div>

		<EditForm Model="@insertrequest" FormName="addNewProduct" OnSubmit="HandleInsert">
			<DataAnnotationsValidator/>
			
			<!--Space Row-->
			<div class="row" id="start">
				<div class="" style="height:100vh;">
				</div>
			</div>
			
			
			<div class="row" id="producttitle">
				<div class="" style="height: 100vh; display:flex; justify-content:center;">
					<div class="mx-auto my-auto">
						<h1 class="fw-bold">Whats this product called?</h1>
						<label for="producttitlet" class="form-label fw-bold">Product Title</label>
						<InputText @bind-Value="insertrequest.Title" type="text" class="form-control" placeholder="Apple iPhone 12 - 128GB - Black (Unlocked) - Excellent Condition" id="producttitlet" />
						<ValidationMessage For="() => insertrequest.Title"/>
					</div>
				</div>
			</div>


			<!--Space Row-->
			<div class="row">
				<div class="" style="height:100vh;">
				</div>
			</div>

			<!--Description-->
			<div class="row" id="productdescription">
				<div class="" style="height: 100vh; width:100%; display:flex; justify-content:center;">
					<div class="mx-auto my-auto">
						<h1 class="fw-bold">Describe this product</h1>
						<label for="productdescriptiont" class="form-label fw-bold">Product Description</label>
						<InputTextArea @bind-Value="insertrequest.Description" type="text" class="form-control fw-bold fs-7" style="height:200px; overflow-y:scroll; scrollbar-width:none; resize:none;" id="productdescriptiont"/>
						<ValidationMessage For="() => insertrequest.Description" />
					</div>
				</div>
			</div>


			<!--Space Row-->
			<div class="row">
				<div class="" style="height:100vh;">
				</div>
			</div>

			<!--Category-->
			<div class="row" id="productcategory">
				<div class="" style="height: 100vh; display:flex; justify-content:center;">
					<div class="mx-auto my-auto">
						@if (ViewModel.Categories == null || !ViewModel.Categories.Any())
						{
							<h4>Something went wrong please try again later..</h4>
						}
						else
						{			
							<h1 class="fw-bold">What type of product is this</h1>
							<label for="productcategoryt" class="form-label fw-bold">Product Category</label>
							<InputSelect @bind-Value="insertrequest.CategoryId" class="form-select" id="productcategoryt">
								<option selected >Select a Category</option>							
								@foreach (var category in ViewModel.Categories)
								{
									<option class="fw-bold" value="@category.CategoryId">@category.Name</option>
								}						
							</InputSelect>
							<ValidationMessage For="() => insertrequest.CategoryId" />
						}
					</div>
				</div>
			</div>


			<!--Space Row-->
			<div class="row">
				<div class="" style="height:100vh;">
				</div>
			</div>

			<!--Condition-->
			<div class="row" id="productcondition">
				<div class="" style="height: 100vh; display:flex; justify-content:center;">
					<div class="mx-auto my-auto">
						@if (ViewModel.Conditions == null || !ViewModel.Conditions.Any())
						{
							<h4>Something went wrong please try again later..</h4>
						}
						else
						{
							<h1 class="fw-bold">What condition would you say this product is in</h1>
							<label for="productconditiont" class="form-label fw-bold">Product Condition</label>
							<InputSelect @bind-Value="insertrequest.ConditionId" class="form-select" id="productconditiont">
								<option selected>Select a Condition</option>
								@foreach (var condition in ViewModel.Conditions)
								{
									<option class="fw-bold" value="@condition.ConditionId">
										<h5>@condition.ConditionTitle</h5>
										<p>@condition.Description</p>
									</option>
								}
							</InputSelect>
							<ValidationMessage For="() => insertrequest.ConditionId" />
						}
					</div>
				</div>
			</div>


			<!--Space Row-->
			<div class="row">
				<div class="" style="height:100vh;">
				</div>
			</div>

			<!--Prices-->
			<div class="row" id="productprices">
				<div class="" style="height: 100vh; display:flex; justify-content:center;">
					<div class="mx-auto my-auto">
						<h1 class="fw-bold">How much did it cost and what do you want to sell it for?</h1>
						<div class="row">
							<div class="col-6">
								<label for="boughtprice" class="form-label fw-bold">Bought for</label>
								<div class="input-group mb-3">
									<span class="input-group-text">$</span>
									<InputNumber @bind-Value="insertrequest.PurchasedPrice" type="number" class="form-control" id="boughtprice"/>
								</div>
							</div>
							<div class="col-6">
								<label for="sellprice" class="form-label fw-bold">Sell for</label>
								<div class="input-group mb-3">
									<span class="input-group-text">$</span>
									<InputNumber @bind-Value="insertrequest.SellPrice" type="text" class="form-control" id="sellprice"/>
								</div>
							</div>
						</div>
					</div>
				</div>
			</div>


			<!--Space Row-->
			<div class="row">
				<div class="" style="height:100vh;">
				</div>
			</div>

			<!--Quantity-->
			<div class="row" id="productquantity">
				<div class="" style="height: 100vh; display:flex; justify-content:center;">

					<div class="mx-auto my-auto">
						<h1 class="fw-bold">How many of this product do you wish to sell</h1>
						<label for="productquantityt">Set Quantity<span id="sliderValue"></span></label>
						<InputNumber @bind-Value="insertrequest.Quantity" type="number" class="form-control" id="quantity" />
						<ValidationMessage For="() => insertrequest.Quantity"/>
					</div>
				</div>
			</div>

			<!--Space Row-->
			<div class="row">
				<div class="" style="height:100vh;">
				</div>
			</div>


			<div class="row" id="finalizeproduct">
				<div class="" style="height: 100vh; display:flex; justify-content:center;">
					<div class="mx-auto my-auto px-5">
						<h1 class="fw-bold mb-3">Add product to your inventory?</h1>
						<button class="btn rounded-3 shadow fw-bold text-white" type="submit" id="finalize" style="background-color:#3E7E55; width:100%;">Add</button>
					</div>
				</div>
			</div>

		</EditForm>	
	</div>
</div>




<script>
	window.scrollToElementById = function (elementId) {
		const element = document.getElementById(elementId);
		if (element) {
			element.scrollIntoView({ behavior: 'smooth' });
		}
	};
</script>

@* 	document.addEventListener('wheel', function (event) {
		event.preventDefault();
	}, { passive: false }); *@


@code {

	[SupplyParameterFromForm]
	private InsertProductRequest insertrequest { get; set; } = new();

	protected override async Task OnInitializedAsync()
	{
		ViewModel.Categories = await Client._categoryRepository.GetAllCategories();
		ViewModel.Conditions = await Client._conditionRepository.GetAllConditions();

		await JS.InvokeVoidAsync("scrollToElementById", "producttitle");
		currentIndex = 1;

		insertrequest.UserGuid = await localStorage.GetItemAsync<string>("UsersGuid");
		insertrequest.Guid = Guid.NewGuid();
		insertrequest.Currency = "USD";
	}


	private async void HandleInsert()
	{
		HttpResponseMessage? result = null;
		int statuscode = 0;

		try
		{
			result = await Client._productRepository.InsertProduct(insertrequest);
			 statuscode = (int)result.StatusCode;
		}
		catch
		{
			Client._navigationManager.NavigateTo($"/dashboard/{ApplicationPages.ItemPage}");
			return;
		}


		if (statuscode == 200)
		{
			Client._navigationManager.NavigateTo($"/dashboard/{ApplicationPages.ItemPage}");
			await Task.CompletedTask;
			return;
		}

		Client._navigationManager.NavigateTo($"/dashboard/{ApplicationPages.ItemPage}");
		return;
	}

	#region HandlePageMovment

		private int currentIndex = 0;

		private string[] formInputs = { "start", "producttitle", "productdescription", "productcategory", "productcondition", "productprices", "productquantity", "finalizeproduct" };

		//Scroll to the Next input field
		private async Task ScrollToNextInput()
		{
			if (currentIndex < formInputs.Length - 1)
			{
				currentIndex++;
				// Call JavaScript to scroll to the next input
				await JS.InvokeVoidAsync("scrollToElementById", formInputs[currentIndex]);
			}
		}

		// Scroll to the previous input field
		private async Task ScrollToPreviousInput()
		{
			if (currentIndex > 1)
			{
				currentIndex--;
				// Invoke JavaScript to scroll to the previous input field
				await JS.InvokeVoidAsync("scrollToElementById", formInputs[currentIndex]);
			}
		}

	#endregion
}


