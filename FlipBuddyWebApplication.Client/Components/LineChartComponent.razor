@using FlipBuddyWebApplication.Domain.Helpers
@using System.Globalization
@rendermode InteractiveServer

<div style="height:300px">

    <ApexChart TItem="MonthlyStats"
               Height="@("100%")"
               Options="options">

        <ApexPointSeries TItem="MonthlyStats"
                         Items="Data"
                         Name="Sales"
                         SeriesType="SeriesType.Bar"
                         XValue="e => e.Month"
                         YValue="e=> e.Sale" />
       

    </ApexChart>
</div>

@code {
    [Parameter]
    public List<Product> Products { get; set; } = new List<Product>();

    private List<MonthlyStats> Data { get; set; } = new();

    protected override void OnInitialized()
    {
        var lastEightMonths = MonthHelper.GetLastEightMonthsWithYear();

        foreach (var monthYear in lastEightMonths)
        {
            int monthNumber = monthYear.Month;

            int year = monthYear.Year;

            Data.Add(new MonthlyStats {
                                        Month = monthYear.MonthName, 
                                        Sale = Products.Where(p => DateTime.TryParse(p.DateSold, out DateTime dateSold) && dateSold.Month == monthNumber && dateSold.Year == year).Select(x => x.SellPrice).Sum(), 
                                        Profit = Products.Where(p => DateTime.TryParse(p.DateSold, out DateTime dateSold) && dateSold.Month == monthNumber && dateSold.Year == year).Select(x => x.CalculateProfit()).Sum()
                                       });    
        }
    }



    #region ChartStyling
    private ApexChartOptions<MonthlyStats> options = new ApexChartOptions<MonthlyStats>()
    {
            Chart = new Chart
            {
                Type = ApexCharts.ChartType.Bar,

                Toolbar = new Toolbar
                {
                    Show = false // This hides the menu bar
                }
            },


        PlotOptions = new PlotOptions
        {
            Bar = new PlotOptionsBar
            {
                BorderRadius = 5,   // Rounds the corners of the bars
                Horizontal = false,   // Vertical bars
                ColumnWidth = "50%"         
            }
        },

        Grid = new Grid
        {
            Show = false,           // Show or hide grid lines
            BorderColor = "#e0e0e0", // Color of the grid lines
            StrokeDashArray = 5,    // Style of the grid lines (dashed lines)
            Position = GridPosition.Back
        },

        Colors = new List<string> { "#FFFFFF" },


         Xaxis = new XAxis
         {
             Labels = new XAxisLabels
             {
                 Style = new AxisLabelStyle
                 {
                     FontSize = "10px",  // Font size for X-axis labels
                     FontFamily = "Urbanist, sans-serif",  // Font family
                     Colors = new List<string> { "#FFFFFF" }, // Font color (can use multiple colors for different labels)
                     FontWeight = "Bold"
                 }
             }
         },
            Yaxis = new List<YAxis>
        {
            new YAxis
            {
                Labels = new YAxisLabels
                {
                    Formatter =  @"function (value) {
                             return '$' + Number(value).toLocaleString();}",

                    Style = new AxisLabelStyle
                    {
                        FontSize = "14px",  // Font size for Y-axis labels
                        FontFamily = "Urbanist, sans-serif",  // Font family
                        Colors = new List<string> { "#FFFFFF" },  // Font color
                        FontWeight = "Bold"
                    }
                }
            }
        },
    };
    #endregion

    public string DollarFormat(string value)
    {
        return $"${value}";    
    }
}

        