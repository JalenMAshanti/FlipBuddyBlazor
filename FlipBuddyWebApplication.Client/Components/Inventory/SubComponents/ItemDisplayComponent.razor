@using FlipBuddyWebApplication.Client.ViewModels.Inventory.ItemDisplay
@using FlipBuddyWebApplication.Domain.Helpers
@using FlipBuddyWebApplication.Domain.Models.Ebay.GeteBAyDetails.Request
@using FlipBuddyWebApplication.Domain.Models.Ebay.ListingOptionsModel
@using FlipBuddyWebApplication.Domain.Models.Ebay

@inject Blazored.LocalStorage.ILocalStorageService localStorage
@inject IJSRuntime JSRuntime
@inject ItemDisplayViewModel ViewModel
@inject ItemDisplayClient Client
@inject NavigationManager NavigationManager


<!-- Page Content -->
<div class="col d-flex flex-column full-height pt-3" style="width: 100%;">

    @if (ViewModel.isLoading)
    {
        <div class="p-4 mt-5" style="height:500px; width:100%; display:flex; justify-content:center; align-content:center;">
			<div class="loader mt-5" style="height:80px; width:80px;"></div>
        </div>
    }
    else
    {
        @if (ViewModel.CurrentDisplayMode == "ViewMode")
        {
 
            <div class="container">
			    <div class="row">
				    <h1 class="fw-bold fs-2">@CurrentProduct.Product.Title</h1>
				    <div class="col-sm-12 col-md-6">
                        <div class="container mb-3"> 
						    <div class="row" style="height:40%;">

                                <div class="col">
								    <h4 class="text-secondary my-3">@Client._productRepository.GetCategory(CurrentProduct.Product.CategoryId, CachedAppData.AllCategoies)</h4>
                                </div>
                                <div class="col">                              
                                    @if (CurrentProduct.Product.DateSold == "")
                                    {
                                        <h4 class="text-secondary my-3 text-end">Not Sold</h4>
                                    }
                                    else
                                    {
                                        <h4 class="text-secondary my-3 text-end">Sold</h4>
                                    }
                                </div>
							
						    </div>
						    <div class="row">
							    <div class="container rounded-4 p-4" style="background-color:#F8F8F8; height:450px; overflow-y:scroll; scrollbar-width:none;">
								    <p class="text-secondary fs-6">
									    @CurrentProduct.Product.Description
								    </p>
							    </div>
						    </div>
                        </div>
					
				    </div>
				    <div class="col-sm-12 col-md-6">
                        <div class="container">
						    <div class="row">
							    <div class="container-background p-4 mt-2 text-center rounded-4" style="background-color:#F8F8F8; min-height:260px;">
								    <h5 class="text-secondary">No thumbnails</h5>
							    </div>
						    </div>
                            <div class="row">
                                <h3 class="fw-bold fs-5 mt-2">Condition</h3>
                                <h5 class="mt-1 mb-2 fs-6">@Client._productRepository.GetCondition(CurrentProduct.Product.ConditionId, CachedAppData.AllConditions)</h5>
                            </div>
						    <div class="row my-3">
							    <div class="col">
								    <h3 class="fw-bold fs-5">Quantity</h3>
								    <h5 class="text-secondary">@CurrentProduct.Product.Quantity</h5>
							    </div>
							    <div class="col">
								    <h3 class="fw-bold fs-5">Purchased</h3>
								    <h5 class="text-secondary">$@CurrentProduct.Product.PurchasePrice</h5>
							    </div>
							    <div class="col">
								    <h3 class="fw-bold fs-5">Selling</h3>
								    <h5 class="text-secondary">$@CurrentProduct.Product.SellPrice</h5>
							    </div>
						    </div>
						    <div class="row">
                                <button class="btn rounded-3 shadow py-3 fw-bold text-white" style="width:100%; background-color:#3E7E55;" data-bs-toggle="modal" data-bs-target="#finalize">List on ebay</button>
						    </div>
                        </div>					
				    </div>
			    </div>
                <div class="row">
                    <div>


                        <div class="accordion accordion-flush" id="accordionFlushExample">
                            <div class="accordion-item">
                                <h2 class="accordion-header bg-light" style="border-top-left-radius:20px; border-top-right-radius:20px;">
                                    <button class="accordion-button collapsed fw-bold fs-4" type="button" data-bs-toggle="collapse" data-bs-target="#flush-collapseOne" aria-expanded="false" aria-controls="flush-collapseOne">
                                        Specifications
                                    </button>
                                </h2>
                                <div id="flush-collapseOne" class="accordion-collapse collapse bg-light" data-bs-parent="#accordionFlushExample" style="border-bottom-left-radius:20px; border-bottom-right-radius:20px;">
                                    <div class="accordion-body">
                                        <div class="row px-2">
                                            @if (CurrentProduct.ProductSpecifics != null)
                                            {
                                                @foreach (var specific in CurrentProduct.ProductSpecifics)
                                                {
                                                    <div class="col p-3">
                                                        <div class="bg-light rounded-3 p-4 shadow-sm">
                                                            <h5 class="fw-bold">@specific.SpecificName</h5>
                                                            <ul>
                                                                @foreach (var value in specific.Values)
                                                                {
                                                                    <li><p class="text-secondary">@value.SpecificValue</p></li>
                                                                }
                                                            </ul>

                                                        </div>
                                                    </div>
                                                }
                                            }
                                            else
                                            {
												<p>No product specifics</p>
                                            }


                                        </div>
                                    </div>
                                </div>
                            </div>                           
                        </div>
                    </div>
                </div>
            </div>

        }



        else
        {
            <EditForm Model="UpdateProductRequest" FormName="UpdateProduct">

                <div class="container">
                    <div class="row">
                        <div class="col">
							<h1 class="text-secondary mb-3">Edit Mode</h1>
                        </div>
                        <div class="col" style="display:flex; justify-content:end;">
                            <button type="button" class="btn btn-outline-success px-4" style="height:40px;" @onclick="HandleSave">Save</button>
                        </div>
                    </div>
				
                    <div class="row">    
                        <div class="col-10">
							<InputTextArea @bind-Value="UpdateProductRequest.Title" class="fw-bold fs-2" style="overflow-y:scroll; scrollbar-width:none; resize:none; width:100%;"></InputTextArea>
                        </div>
                        <div class="col-2">
                            <button @onclick="HandleDelete" class="btn btn-danger rounded-3 mt-3 me-2"><i class="bi bi-trash3 fs-5"></i></button>
                        </div>
                        
                        <div class="col-sm-12 col-md-6">
                            <div class="container mb-3">
                                <div class="row" style="height:40%;">
                                    <div class="col">
                                        <InputSelect @bind-Value="UpdateProductRequest.CategoryId" class="form-select my-3" id="productcategoryt">
                                            <option selected disabled>Select a Category</option>
                                            @foreach (var category in ViewModel.Categories)
                                            {
                                                <option class="fw-bold" value="@category.CategoryId">@category.Name</option>
                                            }
                                        </InputSelect>
                                    </div>
                                    <div class="col">

                                        <InputDate class="form-control input-group date my-3" @bind-Value="UpdateProductRequest.DateSold"/>

                                    </div>

                                </div>
                                <div class="row">
                                    <div class="container rounded-4 p-2" style="background-color:#F8F8F8; height:450px;">
										<InputTextArea style="height:100%; width:100%; background-color:transparent; overflow-y:scroll; scrollbar-width:none; resize:none;" @bind-Value="UpdateProductRequest.Description" class="text-secondary fs-6 p-2">
                                            @CurrentProduct.Product.Description
                                        </InputTextArea>
                                    </div>
                                </div>
                            </div>

                        </div>
                        <div class="col-sm-12 col-md-6">
                            <div class="container">
                                <div class="row">
                                    <div class="container-background p-4 mt-2 text-center rounded-4" style="background-color:#F8F8F8; min-height:260px;">
                                        @if (!Enumerable.Any(ViewModel.Images))
                                        {
                                            <h5 class="text-secondary">No thumbnails</h5>
                                        }
                                        else 
                                        {
                                            <h5 class="text-secondary">No thumbnails</h5>
                                        }
                                    </div>
                                </div>
                                <div class="row">
                                    <h3 class="fw-bold fs-5 mt-2">Condition</h3>
                                    <InputSelect @bind-Value="UpdateProductRequest.ConditionId" class="form-select" id="productconditiont">
                                        <option selected disabled>Select a Condition</option>
                                        @foreach (var condition in ViewModel.Conditions)
                                        {
                                            <option class="fw-bold" value="@condition.ConditionId">
                                                <h5>@condition.ConditionTitle</h5>
                                                <p>@condition.Description</p>
                                            </option>
                                        }
                                    </InputSelect>
                                </div>
                                <div class="row my-3">
                                    <div class="col-sm-12 col-lg-4 mb-2">
                                        <h3 class="fw-bold fs-5">Quantity</h3>
                                        <InputNumber style="width:100%" @bind-Value="UpdateProductRequest.Quantity" class="text-secondary form-control">@CurrentProduct.Product.Quantity</InputNumber>
                                    </div>
                                    <div class="col-sm-12 col-lg-4 mb-2">
                                        <h3 class="fw-bold fs-5">Purchased</h3>
                                        
                                        <div class="input-group" style="width:100%;">
                                            <span class="input-group-text">$</span>
											<InputNumber  @bind-Value="UpdateProductRequest.PurchasedPrice" class="text-secondary form-control" type="number" id="boughtprice"/>
                                        </div>
                                        
                                    </div>
                                    <div class="col-sm-12 col-lg-4 mb-2">
                                        <h3 class="fw-bold fs-5">Selling</h3>
                                        <div class="input-group" style="width:100%;">
                                            <span class="input-group-text">$</span>
                                            <InputNumber @bind-Value="UpdateProductRequest.SellPrice" class="text-secondary form-control" type="number" id="boughtprice" />
                                        </div>
                                    </div>
                                </div>
                                <div class="row">
                                    <button class="btn rounded-3 shadow py-3 fw-bold text-white" style="width:100%; background-color:#3E7E55;" disabled>List on ebay</button>
                                </div>
                            </div>
                        </div>
                    </div>
                </div>
            </EditForm>          
        }

        <div class="container" style="display:flex; justify-content:center;">
			<button class="rounded-2 mt-4 py-1 px-3 fw-bold bg-secondary text-white" style="width:100px;" @onclick="HandleEditToggler">Edit</button>
        </div>
        

        <div class="container">
			<div class="row">
				<div class="container">
                    <h1 class="fw-bold fs-2">AI Insight</h1>
                    <div class="container p-3 rounded-4" style="background-color:#F8F8F8;">
						<h3 class="fs-5">Use a flip to let ai to tailor your listing</h3>
					</div>
				</div>
			</div>
		</div>
    }
</div>




<div class="modal fade" id="finalize" tabindex="-1" aria-labelledby="finalize" aria-hidden="true">
    @if (ListingOptions != null)
    {
        <div class="modal-dialog">
            <div class="modal-content">
                <div class="modal-header">
                    <h1 class="modal-title fs-5 fw-bold" id="exampleModalLabel">Ebay Listing Options</h1>
                    <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
                </div>
			    <div class="modal-body">
				    
					<div class="container px-2 py-2">

						<div class="mb-3 rounded-3 p-3 bg-light" style="height:300px; overflow-y:scroll; scrollbar-width:none; resize:none;">
							<h5 class="fw-bold">@ListingOptions.ProductandSpecifics.Product.Title (@ListingOptions.ProductandSpecifics.Product.Quantity)</h5>

                            <p>@ListingOptions.ProductandSpecifics.Product.Description</p>

							<h6 class="fw-bold">Sell Price</h6>

							<h7>@ListingOptions.ProductandSpecifics.Product.SellPrice.ToString("C")</h7>

                            <h6 class="fw-bold mt-2">Condition</h6>

                            <h7>@Client._productRepository.GetCondition(ListingOptions.ProductandSpecifics.Product.ConditionId, CachedAppData.AllConditions)</h7>

                            <h6 class="fw-bold mt-2">Ebay Category Id</h6>

                            <h7>@ListingOptions.ProductandSpecifics.Product.EbayCategoryId</h7>
						
                       
							@if (ListingOptions.ProductandSpecifics.ProductSpecifics != null)
							{
								@foreach (var specific in ListingOptions.ProductandSpecifics.ProductSpecifics)
								{
									<h6 class="fw-bold mt-2">@specific.SpecificName</h6>

									@if (specific.Values != null)
									{
										<ul>
											@foreach (var specificValue in specific.Values)
											{
												<li>@specificValue.SpecificValue</li>
											}
										</ul>
									}
								}
							}

						</div>
						
                           
                        

                        @if (ViewModel.EbayReturnDetails.ReturnPolicyDetails is null || ViewModel.EbayShippingDetails.ShippingServiceDetails is null)
                        {
                            <p class="text-danger">Could not load listing options. make sure account is linked to ebay</p>
                        }
                        else
                        {
                          <EditForm Model="@ListingOptions" FormName="EbayListingOptions">
				          
                            <div class="col">
								<div class="mb-4">
									<h5 class="fw-bold">Shipping Options</h5>
									<div class="row">
										<p class="fs-7 mt-2">Free Shipping</p>
										<InputSelect @bind-Value="ListingOptions.FreeShipping" class="form-select">
											<option selected class="fw-bold" value="true"><h5>Yes</h5></option>
											<option class="fw-bold" value="false"><h5>No</h5></option>
										</InputSelect>
									</div>
									<div class="row">
										<p class="fs-7 mt-2">Shipping Services</p>
										<InputSelect @bind-Value="ListingOptions.FreeShipping" class="form-select">
											<option selected class="fw-bold" value="true"><h5>UPSGround</h5></option>
											@foreach (var shippingService in ViewModel.EbayShippingDetails.ShippingServiceDetails.Where(_ => _.ValidForSellingFlow == true))
											{
												<option selected class="fw-bold" value="@shippingService.ShippingService"><h5>@shippingService.Description</h5></option>
											}
										</InputSelect>
									</div>
									<div class="row">
										<p class="fs-7 mt-2">Additional Shipping Costs</p>
										<div class="input-group" style="width:100%;">
											<span class="input-group-text">$</span>
											<InputNumber @bind-Value="ListingOptions.AdditionalShippingCosts" class="form-control" type="number"/>
										</div>
									</div>
								</div>

                                <div class="mt-4 pt-3">
									<h5 class="fw-bold">Return Options</h5>
									<div class="row">
										<p class="fs-7 mt-2">Accept Returns</p>
										<InputSelect @bind-Value="ListingOptions.ReturnsAccepted" class="form-select">
											@foreach (var acceptReturnOptions in ViewModel.EbayReturnDetails.ReturnPolicyDetails.ReturnsAccepted)
											{
												@if (acceptReturnOptions.ReturnsAcceptedOption == "ReturnsAccepted")
												{
													<option selected class="fw-bold" value="@acceptReturnOptions.ReturnsAcceptedOption"><h5>@acceptReturnOptions.Description</h5></option>
												}
												else
												{
													<option class="fw-bold" value="@acceptReturnOptions.ReturnsAcceptedOption"><h5>@acceptReturnOptions.Description</h5></option>
												}
											}
										</InputSelect>
									</div>

									@if (ListingOptions.ReturnsAccepted == "ReturnsNotAccepted")
									{

									}
									else
									{
										<div class="row">
											<p class="fs-7 mt-2">Accept Returns Within</p>
											<InputSelect @bind-Value="ListingOptions.ReturnsWithin" class="form-select">
												@foreach (var returnLimit in ViewModel.EbayReturnDetails.ReturnPolicyDetails.ReturnsWithin)
												{
													@if (returnLimit.ReturnsWithinOption == "Days_30")
													{
														<option selected class="fw-bold" value="@returnLimit.ReturnsWithinOption"><h5>@returnLimit.Description</h5></option>
													}
													else
													{
														<option class="fw-bold" value="@returnLimit.ReturnsWithinOption"><h5>@returnLimit.Description</h5></option>
													}
												}
											</InputSelect>
										</div>
										<div class="row">
											<p class="fs-7 mt-2">Return Shipping Paid By</p>
											<InputSelect @bind-Value="ListingOptions.ReturnShippingCostPaidBy" class="form-select">
												@foreach (var returnPaymentOption in ViewModel.EbayReturnDetails.ReturnPolicyDetails.ShippingCostPaidBy)
												{
													@if (returnPaymentOption.ShippingCostPaidByOption == "Buyer")
													{
														<option selected class="fw-bold" value="@returnPaymentOption.ShippingCostPaidByOption"><h5>@returnPaymentOption.Description</h5></option>
													}
													else
													{
														<option class="fw-bold" value="@returnPaymentOption.ShippingCostPaidByOption"><h5>@returnPaymentOption.Description</h5></option>
													}
												}
											</InputSelect>
										</div>
									}
                                </div>
                            </div>
						</EditForm>  
                        }
                        
					</div>			    
                </div>
                <div class="modal-footer">
                    @if (ViewModel.EbayReturnDetails.ReturnPolicyDetails is null || ViewModel.EbayShippingDetails.ShippingServiceDetails is null)
                    {
                        <button disabled type="button" style="width: 100%;" class="btn btn-success fw-bold">List</button>
                    }
                    else
                    {
                        <button type="button" style="width: 100%;" class="btn btn-success fw-bold" @onclick="HandleListing">List</button>
                    }
                </div>
            </div>
        </div>
    }    
    else
    {
     <h1> an error occured</h1>   
    }
</div>

<div class="toast-container position-fixed bottom-0 end-0 p-3">
    <div id="toastMessage" class="toast align-items-center text-white bg-success border-0" role="alert" aria-live="assertive" aria-atomic="true">
        <div class="d-flex">
            <div class="toast-body">
                Listing successfully handled!
            </div>
            <button type="button" class="btn-close btn-close-white me-2 m-auto" data-bs-dismiss="toast" aria-label="Close"></button>
        </div>
    </div>
</div>

<!-- Styles -->
<style>
	.rounded-pill {
		background-color: #EAEEE5;
		padding: 10px 25px;
		display: inline-block;
	}


	.text-white {
		color: white;
	}

	.upgrade-btn {
		background-color: #3E7E55;
		color: white;
		position: absolute;
		bottom: 20px;
		padding: 10px 20px;
	}

	.overview-row h1 {
		font-size: 25px;
	}

	/* Portfolio */
	.portfolio-container {
		font-size: clamp(1.5rem, 4vw, 3vw);
	}

	/* Recently Listed Items */
	.recent-items {
		padding-top: 10px;
	}

	/* Flex and alignment */
	.full-height {
		height: 100%;
	}

	.half-height {
		height: 40%;
        
	}

    .subimage{
        background-color:#CADEC8;
        background-size:contain;
        background-repeat: no-repeat;
        background-position:center;
    }

    .loader {
        width: 60px;
        aspect-ratio: 1;
        display: grid;
        grid: 50%/50%;
        color: #3E7E55;
        --_g: no-repeat linear-gradient(currentColor 0 0);
        background: var(--_g),var(--_g),var(--_g);
        background-size: 50.1% 50.1%;
        animation: l6-0 1.5s infinite steps(1) alternate, l6-0-0 3s infinite steps(1);
    }

        .loader::before {
            content: "";
            background: currentColor;
            transform: perspective(150px) rotateY(0deg) rotateX(0deg);
            transform-origin: bottom right;
            animation: l6-1 1.5s infinite linear alternate;
        }

    @@keyframes l6-0 {
        0% {
            background-position: 0 100%,100% 100%,100% 0
        }

        33% {
            background-position: 100% 100%,100% 100%,100% 0
        }

        66% {
            background-position: 100% 0,100% 0,100% 0
        }
    }

    @@keyframes l6-0-0 {
        0% {
            transform: scaleX(1) rotate(0deg)
        }

        50% {
            transform: scaleX(-1) rotate(-90deg)
        }
    }

    @@keyframes l6-1 {
        16.5% {
            transform: perspective(150px) rotateX(-90deg) rotateY(0deg) rotateX(0deg);
            filter: grayscale(0.8)
        }

        33% {
            transform: perspective(150px) rotateX(-180deg) rotateY(0deg) rotateX(0deg)
        }

        66% {
            transform: perspective(150px) rotateX(-180deg) rotateY(-180deg) rotateX(0deg)
        }

        100% {
            transform: perspective(150px) rotateX(-180deg) rotateY(-180deg) rotateX(-180deg);
            filter: grayscale(0.8)
        }
    }

    .accordion-button:focus {
        box-shadow: none; /* Removes the blue glow */
        outline: none; /* Removes the default outline */
        background-color: none;
    }

    .accordion-button:not(.collapsed) {
        background-color: transparent; /* Removes the background color */
        color: inherit; /* Keeps text color as default */
        box-shadow: none; /* Removes any shadow */
    }
</style>

<script>
    function showToast(message, bgClass) {
        var toastElement = document.getElementById('toastMessage');
        var toastBody = toastElement.querySelector('.toast-body');
        var toast = new bootstrap.Toast(toastElement);

        // Update message and style dynamically
        toastBody.textContent = message;
        toastElement.className = `toast align-items-center text-white ${bgClass} border-0`;

        toast.show();
    }
</script>

@code
{
    [Parameter]
    public ProductAndSpecifics? CurrentProduct { get; set; }

    [SupplyParameterFromForm]
    public UpdateProductByGuidAndUserGuidRequest UpdateProductRequest { get; set; } = new UpdateProductByGuidAndUserGuidRequest();

    [SupplyParameterFromForm]
    public EbayListingOptions? ListingOptions { get; set; } 


    protected async override Task OnInitializedAsync()
    {
        ViewModel = new ItemDisplayViewModel();
        ViewModel.Conditions = CachedAppData.AllConditions;
        ViewModel.Categories = CachedAppData.AllCategoies;
        ViewModel.UserGuid = await localStorage.GetItemAsync<string>(LocalStorageTags.GetUserGuid);
        ViewModel.ProductGuid = await localStorage.GetItemAsync<string>(LocalStorageTags.GetSelectedItem);
        CurrentProduct = await Client._productRepository.GetProductByGuidAndUserGuid(ViewModel.UserGuid,ViewModel.ProductGuid);

        ListingOptions = new EbayListingOptions();
        ListingOptions.ProductandSpecifics = CurrentProduct;
        ListingOptions.Token = Hidden.TestUserToken;

        ViewModel.EbayShippingDetails = await Client._ebayRepository.GetEbayDetails("ShippingServiceDetails",$"{Hidden.TestUserToken}");
        ViewModel.EbayReturnDetails = await Client._ebayRepository.GetEbayDetails("ReturnPolicyDetails", $"{Hidden.TestUserToken}");


        ViewModel.IsStillLoading(CurrentProduct.Product);
    }

    public async Task HandleEditToggler()
    {
        if (ViewModel.CurrentDisplayMode == "ViewMode")
        {
            UpdateProductRequest.UserGuid = Guid.Parse(ViewModel.UserGuid);
            UpdateProductRequest.Guid = Guid.Parse(ViewModel.ProductGuid);
            UpdateProductRequest.Title = CurrentProduct.Product.Title;
            UpdateProductRequest.Description = CurrentProduct.Product.Description;
            UpdateProductRequest.PurchasedPrice = CurrentProduct.Product.PurchasePrice;
            UpdateProductRequest.SellPrice = CurrentProduct.Product.SellPrice;
            UpdateProductRequest.Quantity = CurrentProduct.Product.Quantity;
            UpdateProductRequest.BarCode = CurrentProduct.Product.Barcode;
            UpdateProductRequest.CategoryId = CurrentProduct.Product.CategoryId;
            UpdateProductRequest.ConditionId = CurrentProduct.Product.ConditionId;
            UpdateProductRequest.Currency = CurrentProduct.Product.Currency;

            if (CurrentProduct.Product.DateSold != string.Empty)
            {
                try
                {
                    UpdateProductRequest.DateSold = DateConverters.ConvertStringToDateOnly(CurrentProduct.Product.DateSold);
                }
                catch
                {

                }  
            }

            ViewModel.CurrentDisplayMode = "EditMode";
        }
        else if (ViewModel.CurrentDisplayMode == "EditMode")
        {
            ViewModel.CurrentDisplayMode = "ViewMode";    
        }
        return;
    }

    public async Task HandleSave()
    {
        ViewModel.isLoading = true;

        var DateString = UpdateProductRequest.DateSold.ToString();
        if (DateString == "01/01/0001")
        {
            UpdateProductRequest.DateSold = null;
        }
        var result = await Client._productRepository.UpdateProductByGuidAndUserGuid(UpdateProductRequest);  

        CurrentProduct = await Client._productRepository.GetProductByGuidAndUserGuid(ViewModel.UserGuid, ViewModel.ProductGuid);

        ViewModel.isLoading = false;

        ViewModel.CurrentDisplayMode = "ViewMode";

        StateHasChanged();
    }

    public async Task HandleDelete()
    {
        try
        {
            var response = await Client._productRepository.DeleteProductByProductGuid(CurrentProduct.Product.ProductGuid);

            if (response.IsSuccessStatusCode)
            {
                NavigationManager.NavigateTo($@"/dashboard/{ApplicationPages.ItemPage}");
            }
            else
            {
                //NavigationManager.NavigateTo($@"/dashboard/{ApplicationPages.HomePage}");
            }
        }
        catch(Exception ex)
        {
            Console.WriteLine(ex);
        }
    }

    public async void HandleListing()
    {
        var ListingId = await Client._productRepository.ListFromInventoryToEbay(ListingOptions);

        if (ListingId == 0)
        {
            await JSRuntime.InvokeVoidAsync("showToast", $"Item could not be listed", "bg-danger");
        }
        else
        {
            await JSRuntime.InvokeVoidAsync("showToast", $"Listing: https://sandbox.ebay.com/itm/{ListingId}", "bg-success");   
        }     
    }
}