@page "/login"

@inject Blazored.LocalStorage.ILocalStorageService localStorage
@inject LoginRepository LoginRepository
@inject NavigationManager NavigationManager
@inject GoogleAuthService AuthService


<div class="" style="background:#EAEEE5; height:100vh; width:100%; ">
	<div class="loginbg" style="height:100%;">
		<div class="container pt-4" style="">

			<div class="row">
				<div class="col-6 col-sm-4">
					<h2 class="fw-bold">FlipBuddy</h2>
				</div>

				<div class="col-6 col-sm-8 d-flex justify-content-end">
					<a href="/signup" class="btn fw-bold text-black focus-ring focus-ring-dark">Sign up</a>
					<a class="btn text-white fw-bold rounded-3 ms-5 shadow" style="background:#3E7E55;">Request Demo</a>
				</div>
			</div>


			<div class="row px-5 mt-5">
				<div class="container bg-white rounded-4 p-5 shadow-sm mx-auto my-auto" style="max-width:700px;">

					<h1 class="fw-bold text-center pb-4">Account Login</h1>

					<EditForm Model="@loginRequest" FormName="loginForm" OnValidSubmit="HandleLogin">
						<DataAnnotationsValidator />
						<div class="mb-3">
							<label for="username" class="form-label fw-bold">Username</label>
							<InputText @bind-Value="loginRequest.Username" class="form-control fw-bold" id="username" />
							<ValidationMessage For="()=> loginRequest.Username" />
						</div>

						<label for="password" class="form-label fw-bold">Password</label>
						<InputText @bind-Value="loginRequest.Password" type="password" id="password" class="form-control fw-bold"/>
						<ValidationMessage For="()=> loginRequest.Password" />
						<div id="passwordHelpBlock" class="form-text">
							Remember me
						</div>


						<a href="#" class="text-secondary"><h1 class="fw-bold text-secondary text-center fs-6 mt-4">Having trouble signing in?</h1></a>

						<div class="d-grid gap-2 pt-3">
							<button class="btn fw-bold text-white" type="submit" style="background:#3E7E55;">Sign in</button>
						</div>
					</EditForm>

					<h1 class="fw-bold text-secondary text-center fs-6 m-4">Or sign in with</h1>

					<div class="d-grid gap-2">
						<a href="/google-auth/" class="btn btn-light shadow-sm fw-bold" type="button"><i class="bi bi-google"></i>   Google</a>
						<a href="@ebayredirect" class="btn btn-light shadow-sm fw-bold" type="button">Ebay</a>
					</div>
				</div>
			</div>

			<div class="row">

			</div>
		</div>
	</div>
</div>

<style>
	.loginbg {
		background-image: url('Images/LoginBackground.png');
		background-size: cover;
		background-repeat: no-repeat;
		background-position: center;
		background-blend-mode: overlay;
	}
</style>

@code {
	public string? UserGuid { get; set; } = string.Empty;

	[SupplyParameterFromForm]
	private LoginRequest loginRequest { get; set; } = new LoginRequest()
	{
		Username = string.Empty,
		Password = string.Empty,
	};

	protected async override void OnAfterRender(bool firstRender)
	{
		//automatic login
		var persistingGuid = await localStorage.GetItemAsync<string>("UsersGuid");
		if(!string.IsNullOrEmpty(persistingGuid))
		{
			NavigationManager.NavigateTo($"/dashboard/{ApplicationPages.HomePage}");
			return;
		}
	}

	private async Task HandleLogin()
	{

		try
		{
			UserGuid = (await LoginRepository.Login(loginRequest)).userGuid.guid;
			await localStorage.SetItemAsync("UsersGuid", UserGuid);
		}
		catch 
		{
			NavigationManager.NavigateTo("/login");
			return;
		}

		if(!string.IsNullOrEmpty(UserGuid))
		{
			NavigationManager.NavigateTo($"/dashboard/{ApplicationPages.HomePage}");
			return;

		}

		NavigationManager.NavigateTo("/login");
		return;
	}

	public string ebayredirect = @"https://auth.sandbox.ebay.com/oauth2/authorize?client_id=JalenAsh-FlipBudd-SBX-b6df6134a-4039bc91&response_type=code&redirect_uri=Jalen_Ashanti-JalenAsh-FlipBu-lnsukfx&scope=https://api.ebay.com/oauth/api_scope https://api.ebay.com/oauth/api_scope/buy.order.readonly https://api.ebay.com/oauth/api_scope/buy.guest.order https://api.ebay.com/oauth/api_scope/sell.marketing.readonly https://api.ebay.com/oauth/api_scope/sell.marketing https://api.ebay.com/oauth/api_scope/sell.inventory.readonly https://api.ebay.com/oauth/api_scope/sell.inventory https://api.ebay.com/oauth/api_scope/sell.account.readonly https://api.ebay.com/oauth/api_scope/sell.account https://api.ebay.com/oauth/api_scope/sell.fulfillment.readonly https://api.ebay.com/oauth/api_scope/sell.fulfillment https://api.ebay.com/oauth/api_scope/sell.analytics.readonly https://api.ebay.com/oauth/api_scope/sell.marketplace.insights.readonly https://api.ebay.com/oauth/api_scope/commerce.catalog.readonly https://api.ebay.com/oauth/api_scope/buy.shopping.cart https://api.ebay.com/oauth/api_scope/buy.offer.auction https://api.ebay.com/oauth/api_scope/commerce.identity.readonly https://api.ebay.com/oauth/api_scope/commerce.identity.email.readonly https://api.ebay.com/oauth/api_scope/commerce.identity.phone.readonly https://api.ebay.com/oauth/api_scope/commerce.identity.address.readonly https://api.ebay.com/oauth/api_scope/commerce.identity.name.readonly https://api.ebay.com/oauth/api_scope/commerce.identity.status.readonly https://api.ebay.com/oauth/api_scope/sell.finances https://api.ebay.com/oauth/api_scope/sell.payment.dispute https://api.ebay.com/oauth/api_scope/sell.item.draft https://api.ebay.com/oauth/api_scope/sell.item https://api.ebay.com/oauth/api_scope/sell.reputation https://api.ebay.com/oauth/api_scope/sell.reputation.readonly https://api.ebay.com/oauth/api_scope/commerce.notification.subscription https://api.ebay.com/oauth/api_scope/commerce.notification.subscription.readonly https://api.ebay.com/oauth/api_scope/sell.stores https://api.ebay.com/oauth/api_scope/sell.stores.readonly";
}
